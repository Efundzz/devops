#  Template maven-build

#  This template allows you to test and build your Java project with Maven.
#  The workflow allows running tests, code checkstyle and security scans on the default branch.

# Prerequisites: pom.xml and appropriate project structure should exist in the repository.

image: maven:3.6.3
pipelines:
  branches:
    feature/*:
      - step:
          name: Build and Test
          caches:
            - maven
          script:
            - mvn clean install --file pom.xml
          after-script:
              # Collect checkstyle results, if any, and convert to Bitbucket Code Insights.
            - pipe: atlassian/checkstyle-report:0.3.0
      - step:
          name: Security Scan
          script:
            # Run a security scan for sensitive data.
            # See more security tools at https://bitbucket.org/product/features/pipelines/integrations?&category=security
            - pipe: atlassian/git-secrets-scan:0.5.1

  custom:
    merge-to-master:
         - step:
            name: Build and Test (Master Branch)
            caches:
               - maven
            script:
              - echo "Building the master branch"
              - mvn clean install --file pom.xml
            after-script:
                # Collect checkstyle results, if any, and convert to Bitbucket Code Insights.
                - pipe: atlassian/checkstyle-report:0.3.0

#
#         - step:
#             name: Authenticate with ECR
#             script:
#               - pipe: atlassian/aws-ecr-login:2.0.0
#                 variables:
#                   AWS_SECRET_ACCESS_KEY: $AWS_SECRET_ACCESS_KEY # Optional if already defined in the context.
#                   AWS_DEFAULT_REGION: $AWS_DEFAULT_REGION # Replace with your desired AWS region.
#                   AWS_ACCOUNT_ID: $AWS_ACCOUNT_ID # Replace with your AWS account ID.
#               - echo "Authenticated with ECR"
#             caches:
#               - docker

         - step:
             name: Build and Test
             script:
               - IMAGE_NAME=efundzdemo
               - docker build . --file Dockerfile --tag ${IMAGE_NAME}
               - echo "Docker image $IMAGE_NAME built successfully."
               - docker save ${IMAGE_NAME} --output "${IMAGE_NAME}.tar"
               - echo "Docker image $IMAGE_NAME saved as ${IMAGE_NAME}.tar"
             services:
               - docker
             caches:
               - docker
             artifacts:
               - "*.tar"

         - step:
             name: Push image to ECR
             script:
               - IMAGE_NAME="efundzdemo"
               - VERSION="dev-0.1.${BITBUCKET_BUILD_NUMBER}"
               - ECR_REPOSITORY="public.ecr.aws/j3z0v8x9/efundzz_demo" # Replace with your ECR repository URL
               - IMAGE="${ECR_REPOSITORY}:${VERSION}"
               - docker load --input "${IMAGE_NAME}.tar"
               - docker tag "${IMAGE_NAME}" "${IMAGE}"
               - $(aws ecr get-login --no-include-email)
               - docker push "${IMAGE}"
             services:
               - docker
#    docker:
#        - step:
#            name: Build and Test
#            script:
#              - IMAGE_NAME=efundzdemo
#              - docker build . --file Dockerfile --tag ${IMAGE_NAME}
#              - echo "Docker image $IMAGE_NAME built successfully."
#              - docker save ${IMAGE_NAME} --output "${IMAGE_NAME}.tar"
#              - echo "Docker image $IMAGE_NAME saved as ${IMAGE_NAME}.tar"
#            services:
#              - docker
#            caches:
#              - docker
#            artifacts:
#              - "*.tar"
#        - step:
#            name: Push image to dockerhub
#            script:
#              - echo "${DOCKERHUB_PASSWORD}" | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin
#              - IMAGE_NAME="efundzdemo"
#              - VERSION="dev-0.1.${BITBUCKET_BUILD_NUMBER}"
#              - IMAGE="${DOCKERHUB_NAMESPACE}/${IMAGE_NAME}:${VERSION}"
#              - docker load --input "${IMAGE_NAME}.tar"
#              - docker tag "${IMAGE_NAME}" "${IMAGE}"
#              - docker push "${IMAGE}"
#            services:
#                - docker
#        - step:
#            name: Push image to ECR
#            script:
#              - IMAGE_NAME="efundzdemo"
#              - VERSION="dev-0.1.${BITBUCKET_BUILD_NUMBER}"
#              - ECR_REPOSITORY="<your-ecr-repository>" # Replace with your ECR repository URL
#              - IMAGE="${ECR_REPOSITORY}:${VERSION}"
#              - docker load --input "${IMAGE_NAME}.tar"
#              - docker tag "${IMAGE_NAME}" "${IMAGE}"
#              - $(aws ecr get-login --no-include-email)
#              - docker push "${IMAGE}"
#            services:
#              - docker