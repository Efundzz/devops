#  Template maven-build

#  This template allows you to test and build your Java project with Maven.
#  The workflow allows running tests, code checkstyle and security scans on the default branch.

# Prerequisites: pom.xml and appropriate project structure should exist in the repository.

image: maven:3.6.3
pipelines:
  branches:
    feature/*:
      - step:
          name: Build and Test
          caches:
            - maven
          script:
            - mvn clean install --file pom.xml
          after-script:
              # Collect checkstyle results, if any, and convert to Bitbucket Code Insights.
            - pipe: atlassian/checkstyle-report:0.3.0
      - step:
          name: Security Scan
          script:
            # Run a security scan for sensitive data.
            # See more security tools at https://bitbucket.org/product/features/pipelines/integrations?&category=security
            - pipe: atlassian/git-secrets-scan:0.5.1

  custom:
    merge-to-master:
         - step:
            name: Build and Test (Master Branch)
            caches:
               - maven
            script:
              - echo "Building the master branch"
              - mvn clean install --file pom.xml
            after-script:
                # Collect checkstyle results, if any, and convert to Bitbucket Code Insights.
                - pipe: atlassian/checkstyle-report:0.3.0


    master:
        - step:
            name: Build and Test
            script:
              - IMAGE_NAME=$BITBUCKET_REPO_SLUG
              - docker build . --file Dockerfile --tag ${IMAGE_NAME}
              - docker save ${IMAGE_NAME} --output "${IMAGE_NAME}.tar"
            services:
              - docker
            caches:
              - docker
            artifacts:
              - "*.tar"
        - step:
            name: Deploy to development
            deployment: Development
            script:
              - echo ${DOCKERHUB_PASSWORD} | docker login --username "$DOCKERHUB_USERNAME" --password-stdin
              - IMAGE_NAME=$BITBUCKET_REPO_SLUG
              - docker load --input "${IMAGE_NAME}.tar"
              - VERSION="dev-0.1.${BITBUCKET_BUILD_NUMBER}"
              - IMAGE=${DOCKERHUB_NAMESPACE}/${IMAGE_NAME}
              - docker tag "${IMAGE_NAME}" "${IMAGE}:${VERSION}"
              - docker push "${IMAGE}:${VERSION}"
            services:
              - docker