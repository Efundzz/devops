#  Template maven-build

#  This template allows you to test and build your Java project with Maven.
#  The workflow allows running tests, code checkstyle and security scans on the default branch.

# Prerequisites: pom.xml and appropriate project structure should exist in the repository.

image: maven:3.6.3
pipelines:
  branches:
    feature/*:
      - step:
          name: Build and Test
          caches:
            - maven
          script:
            - mvn clean install --file pom.xml
          after-script:
              # Collect checkstyle results, if any, and convert to Bitbucket Code Insights.
            - pipe: atlassian/checkstyle-report:0.3.0
      - step:
          name: Security Scan
          script:
            # Run a security scan for sensitive data.
            # See more security tools at https://bitbucket.org/product/features/pipelines/integrations?&category=security
            - pipe: atlassian/git-secrets-scan:0.5.1

  custom:
     merge-to-master:
         - step:
            name: Build and Test (Master Branch)
            caches:
               - maven
            script:
              - echo "Building the master branch"
              - mvn clean install --file pom.xml
            after-script:
                # Collect checkstyle results, if any, and convert to Bitbucket Code Insights.
                - pipe: atlassian/checkstyle-report:0.3.0

     docker:
        - step:
            name: Build and Test
            script:
              - IMAGE_NAME=efundzdemo
              - docker build . --file Dockerfile --tag ${IMAGE_NAME}
              - echo "Docker image $IMAGE_NAME built successfully."
              - docker save ${IMAGE_NAME} --output "${IMAGE_NAME}.tar"
              - echo "Docker image $IMAGE_NAME saved as ${IMAGE_NAME}.tar"
            services:
              - docker
            caches:
              - docker
            artifacts:
              - "*.tar"
#        - step:
#            name: Push image to dockerhub
#            script:
#              - echo "${DOCKERHUB_PASSWORD}" | docker login --username "${DOCKERHUB_USERNAME}" --password-stdin
#              - IMAGE_NAME="efundzdemo"
#              - VERSION="dev-0.1.${BITBUCKET_BUILD_NUMBER}"
#              - IMAGE="${DOCKERHUB_NAMESPACE}/${IMAGE_NAME}:${VERSION}"
#              - docker load --input "${IMAGE_NAME}.tar"
#              - docker tag "${IMAGE_NAME}" "${IMAGE}"
#              - docker push "${IMAGE}"
#            services:
#                - docker
        - step:
            name: Push image to ECR
#           deployment: development
            image: atlassian/pipelines-awscli
            script:
                - IMAGE_NAME="efundzdemo"
                - VERSION="dev-0.1.${BITBUCKET_BUILD_NUMBER}"
                - ECR_REPOSITORY="247423452789.dkr.ecr.eu-west-1.amazonaws.com/efundzz_test" # Replace with your ECR repository URL
                - IMAGE="${ECR_REPOSITORY}:${VERSION}"
                - echo "Installing AWS CLI..."
#                - yum update
#                - apt-get update
#                - apt-get install -y awscli
#                - export PATH=$PATH:$HOME/.local/bin
                - echo "Logging in to AWS ECR..."
                - export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
                - export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
                - export AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION"
                - echo AWS_ACCESS_KEY_ID
                - echo AWS_SECRET_ACCESS_KEY
                - echo AWS_DEFAULT_REGION
#                - $(aws ecr get-login --no-include-email --region $AWS_DEFAULT_REGION)
                - eval $(aws ecr get-login --region $AWS_DEFAULT_REGION --no-include-email)
                - echo "Logged in to AWS ECR"
                - docker load < "${IMAGE_NAME}.tar"
                - docker tag "${IMAGE_NAME}" "${IMAGE}"
                - docker push "${IMAGE}"
            services:
              - docker